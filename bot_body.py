from lib.configs import *
from lib.keyboards import *
from lib.db_utils import *

from sqlalchemy.exc import IntegrityError

from aiogram import Dispatcher, executor, Bot
from aiogram.types import Message, CallbackQuery, InputMedia, ReplyKeyboardRemove, LabeledPrice

bot = Bot(TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def command_start(message: Message):
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{message.from_user.full_name}</b>"
        f"\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ micros"
    )
    await register_user(message)


async def register_user(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    full_name = message.from_user.full_name
    user = db_check_user(chat_id)

    if user:
        await message.answer(text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
        await show_main_menu(message)
    else:
        db_register_user(full_name, chat_id)
        await message.answer(
            text="–î–ª—è —Å–≤—è–∑–∏ —Å –í–∞–º–∏ –Ω–∞–º –Ω—É–∂–µ–Ω –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä",
            reply_markup=share_phone_button()
        )


@dp.message_handler(content_types=['contact'])
async def finish_register(message: Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    phone = message.contact.phone_number
    db_update_user(chat_id, phone)
    await create_cart_for_user(message)
    await message.answer(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    await show_main_menu(message)


async def create_cart_for_user(message: Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    try:
        db_create_user_cart(chat_id)
    except IntegrityError:
        ...


async def show_main_menu(message: Message):
    """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, Reply –∫–Ω–æ–ø–∫–∏"""
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
        reply_markup=generate_main_menu()
    )


@dp.message_handler(lambda message: '‚úî –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑' in message.text)
async def make_order(message: Message):
    chat_id = message.chat.id
    await bot.send_message(
        chat_id=chat_id,
        text="–ü–æ–≥–Ω–∞–ª–∏",
        reply_markup=back_to_main_menu()
    )
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=generate_category_menu(chat_id)
    )


@dp.callback_query_handler(lambda call: 'category_' in call.data)
async def show_product_button(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    category_id = int(call.data.split('_')[-1])
    await bot.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        chat_id=chat_id,
        message_id=message_id,
        reply_markup=show_product_by_category(category_id)
    )


@dp.callback_query_handler(lambda call: 'main_menu' in call.data)
async def return_to_category(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=generate_category_menu(chat_id)
    )


@dp.message_handler(regexp=r'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def return_to_main_menu(message: Message):
    message_id = message.message_id - 1
    await bot.delete_message(
        chat_id=message.chat.id,
        message_id=message_id
    )
    await show_main_menu(message)


@dp.callback_query_handler(lambda call: 'product_' in call.data)
async def show_choose_product(call: CallbackQuery):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.delete_message(
        chat_id=chat_id,
        message_id=message_id
    )
    product_id = int(call.data.split('_')[-1])
    product = db_get_product(product_id)

    user_cart = db_get_user_cart(chat_id)
    db_update_to_cart(price=product.price, quantity=1, cart_id=user_cart.cart_id)
    await bot.send_message(
        chat_id=chat_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä',
        reply_markup=back_to_menu()
    )

    text = f"{product.product_name}\n"
    text += f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {product.description}\n"
    text += f"–¶–µ–Ω–∞: {product.price} —Å—É–º"

    with open(product.image, mode='rb') as img:
        await bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption=text,
            reply_markup=generate_constructor_button(1)
        )


@dp.callback_query_handler(lambda call: 'action' in call.data)
async def constructor_changes(call: CallbackQuery):
    chat_id = call.from_user.id
    message_id = call.message.message_id
    action = call.data.split()[-1]
    try:
        user_cart = db_get_user_cart(chat_id)
        cart_id = user_cart.cart_id
        total_products = user_cart.total_products
    except Exception as e:
        print(e, '===================ERROR==========')
        await bot.delete_message(
            chat_id=chat_id,
            message_id=message_id
        )
        await bot.send_message(
            chat_id=chat_id,
            text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞–º –∫–æ–Ω—Ç–∞–∫—Ç",
            reply_markup=share_phone_button()
        )

    product_name = call.message['caption'].split('\n')[0]
    product = db_get_product_by_name(product_name)
    match action:
        case '+':
            db_update_to_cart(
                price=product.price,
                quantity=total_products + 1,
                cart_id=cart_id
            )
        case '-':
            db_update_to_cart(
                price=product.price,
                quantity=total_products - 1,
                cart_id=cart_id
            )

    user_cart = db_get_user_cart(chat_id)
    text = f"{product.product_name}\n"
    text += f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {product.description}\n"
    text += f"–¶–µ–Ω–∞: {user_cart.total_price} —Å—É–º"

    try:
        with open(product.image, mode='rb') as img:
            await bot.edit_message_media(
                chat_id=chat_id,
                message_id=message_id,
                media=InputMedia(media=img, caption=text),
                reply_markup=generate_constructor_button(user_cart.total_products)
            )
    except:
        pass


@dp.message_handler(regexp=r'‚¨Ö –ù–∞–∑–∞–¥')
async def return_menu(message: Message):
    message_id = message.message_id - 1
    await bot.delete_message(
        chat_id=message.chat.id,
        message_id=message_id
    )
    await make_order(message)


@dp.callback_query_handler(lambda call: 'put into cart' in call.data)
async def put_into_cart(call: CallbackQuery):
    chat_id = call.from_user.id
    user_cart = db_get_user_cart(chat_id)
    cart_id = user_cart.cart_id
    total_products = user_cart.total_products
    total_price = user_cart.total_price
    product_name = call.message['caption'].split('\n')[0]

    if db_ins_or_upd_finally_cart(cart_id, product_name, total_products, total_price):
        await bot.answer_callback_query(call.id, "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        await bot.answer_callback_query(call.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")


@dp.callback_query_handler(regexp=r"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∫–∞")
async def show_finally_cart(call: CallbackQuery):
    message_id = call.message.message_id
    chat_id = call.from_user.id
    await bot.delete_message(
        chat_id=chat_id,
        message_id=message_id
    )

    cart_products = db_get_cart_products(chat_id)
    text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: \n\n'
    total_products = total_price = count = 0
    for name, quantity, price in cart_products:
        count += 1
        total_products += quantity
        total_price += price
        text += f'{count}. {name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price}\n\n'

    if count:
        text += f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {total_products}\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã: {total_price}'
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=generate_cart_button(chat_id)
        )
    else:
        await bot.send_message(
            chat_id=chat_id,
            text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∫–∞ –ø—É—Å—Ç–∞ ü•¥"
        )





executor.start_polling(dp)
